openapi: 3.0.3
info:
  version: 0.0.1
  title: Order Book API
servers:
- url: http://localhost:8080
  description: Local
paths:
  /api/v1/orders:
    post:
      summary: Create a new order.
      responses:
        201:
          description: Order has been accepted.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/UUID"
        400:
          $ref: "#/components/schemas/PostError"
        403:
          description: Forbidden, your account is deny-listed
        429:
          description: Too many order placements
        500:
          description: Error adding an order
      requestBody:
        description: The order to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreation"
    get:
      summary: Get existing orders.
      parameters:
        - name: owner
          in: query
          schema:
            $ref: "#/components/schemas/Address"
        - name: sellToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
        - name: buyToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
      responses:
        200:
          description: existing orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderFull"
  /api/v1/gas-tip/{sellToken}:
    get:
      summary: The tip that is used to pay solvers for their service in the sellToken of an order.
      description: The tip is calculated by the order service and depends on the current gas price and the expected gas costs to settle the trade
      responses:
        200:
          description: the tip
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tip"
        400:
          description: sellToken not existent
components:
  schemas:
    Address:
      description: Ethereum 40 byte address encoded as a hex without `0x` prefix.
      type: string
      example: "6810e776880c02933d47db1b9fc05908e5386b96"
    TokenAmount:
      description: Amount of a token. uint256 encoded in decimal.
      type: string
      example: "1234567890"
    Tip:
      description: The tip that is used to pay solvers. uint256.
      type: object
      properties:
        expirationDate:
          description: |
            Expiration date of the offered tip. Order service might not accept 
            the tip after this expiration date. Encoded as unix timestamp.
          type: integer
        tipAmount:
          description: Amount of tip in specified sellToken
          type: integer
    OrderType:
      description: Is this a buy order or sell order?
      type: string
      enum: [buy, sell]
    OrderCreation:
      description: Data a user provides when creating a new order.
      type: object
      properties:
        sellToken:
          description: "ERC20 token to be sold"
          $ref: "#/components/schemas/Address"
        buyToken:
          description: "ERC20 token to be bought"
          $ref: "#/components/schemas/Address"
        sellAmount:
          description: "Amount of sellToken to be sold in atoms"
          $ref: "#/components/schemas/TokenAmount"
        buyAmount:
          description: "Amount of buyToken to be bought in atoms"
          $ref: "#/components/schemas/TokenAmount"
        validTo:
          description: Unix timestamp until the order is valid. uint32.
          type: integer
        appData:
          description: |
            Arbitrary identifier sent along with the order.
            Could be used to track the interface or other meta-aspects of the order. uint32 encoded
          type: integer
        tip:
          description: "Tip to compensate solvers in atoms"
          $ref: "#/components/schemas/TokenAmount"
        orderType:
          description: "The type is either a buy or sell order"
          $ref: "#/components/schemas/OrderType"
        partiallyFillable:
          description: Is this a fill-or-kill order or a partially fillable order?
          type: boolean
        signature:
          description: 65 bytes encoded as hex without `0x` prefix. v + r + s from the spec.
          example: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    OrderExtra:
      description: |
        Extra order data that is returned to users when querying orders 
        but not provided by users when creating orders.
      type: object
      properties:
        creationTime:
          description: Creation time of the order. Encoded as ISO 8601 UTC.
          type: string
          example: "2020-10-22T07:57:18Z"
        owner:
          $ref: "#/components/schemas/Address"
    OrderFull:
      allOf:
        - $ref: "#/components/schemas/OrderCreation"
        - $ref: "#/components/schemas/OrderExtra"
    UUID:
     description: |
      Unique identifier for the order, calculated by keccak256(orderDigest, ownerAddress, validTo),
      where orderDigest = keccak256(orderStruct). bytes32.
     type: string
    PostError:
      type: object
      properties:
        identifier:
          type: string
          enum: [ MissingOrderData, InvalidSignature, DuplicateOrder, InsufficientFunds]
        description:
          type: string
