openapi: 3.0.3
info:
  version: 0.0.1
  title: Order Book API
servers:
- url: http://localhost:8080
  description: Local
paths:
  /api/v1/orders:
    post:
      summary: Create a new order.
      responses:
        201:
          description: Order has been accepted.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/UID"
        400:
          $ref: "#/components/schemas/OrderPostError"
        403:
          description: Forbidden, your account is deny-listed
        429:
          description: Too many order placements
        500:
          description: Error adding an order
      requestBody:
        description: The order to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreation"
    get:
      summary: Get existing orders.
      parameters:
        - name: owner
          in: query
          schema:
            $ref: "#/components/schemas/Address"
        - name: sellToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
        - name: buyToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
      responses:
        200:
          description: existing orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /api/v1/orders/{UID}:
    get:
      summary: Get existing order from UID.
      parameters:
        - in: path
          name: UID
          schema:
            $ref: "#/components/schemas/UID"
          required: true
      responses:
        200:
          description: Order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        404: 
          description: Order was not found
    delete:
      summary: Deletes order from order service,
      description: |
        The successful deletion might not prevent solvers from settling the order
        Authentication must be provided by signing the following message:
        signTypedData({operation: "delete", orderUid: "0x.."})
      parameters:
        - in: path
          name: UID
          schema:
            $ref: "#/components/schemas/UID"
          required: true
      responses:
        200:
          description: Order deleted
        404: 
          description: Order was not found
  /api/v1/fee:
    get:
      description: |
        The fee that is charged for placing an order. 
        The fee is described by a minimum fee - in order to cover the gas costs for onchain settling - and
        a feeRatio charged to the users for using the service. 
      parameters:
        - name: sellToken
          in: query
          schema:
            $ref: "#/components/schemas/Address"
      responses:
        200:
          description: the fee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeInformation"
        400:
          description: sellToken not existent
components:
  schemas:
    Address:
      description: Ethereum 40 byte address encoded as a hex without `0x` prefix.
      type: string
      example: "6810e776880c02933d47db1b9fc05908e5386b96"
    TokenAmount:
      description: Amount of a token. uint256 encoded in decimal.
      type: string
      example: "1234567890"
    FeeInformation:
      description: |
        Provides the information to calculate the fees. 
      type: object
      properties:
        expirationDate:
          description: |
            Expiration date of the offered fee. Order service might not accept 
            the fee after this expiration date. Encoded as ISO 8601 UTC.
          type: string
          example: "2020-12-03T18:35:18.814523Z"
        minimalFee:
          description: Absolute amount of minimal fee charged per order in specified sellToken
          $ref: "#/components/schemas/TokenAmount"
        feeRatio:
          description: The fee ratio charged on a sellAmount. Denoted in basis points
          example: 10
          type: number
          format: int32
    OrderType:
      description: Is this a buy order or sell order?
      type: string
      enum: [buy, sell]
    OrderCreation:
      description: Data a user provides when creating a new order.
      type: object
      properties:
        sellToken:
          description: "ERC20 token to be sold"
          $ref: "#/components/schemas/Address"
        buyToken:
          description: "ERC20 token to be bought"
          $ref: "#/components/schemas/Address"
        sellAmount:
          description: "Amount of sellToken to be sold in atoms"
          $ref: "#/components/schemas/TokenAmount"
        buyAmount:
          description: "Amount of buyToken to be bought in atoms"
          $ref: "#/components/schemas/TokenAmount"
        validTo:
          description: Unix timestamp until the order is valid. uint32.
          type: integer
        appData:
          description: |
            Arbitrary identifier sent along with the order.
            Could be used to track the interface or other meta-aspects of the order. uint32 encoded
          type: integer
        feeAmount:
          description: "Fees: feeRatio * sellAmount + minimal_fee in atoms"
          $ref: "#/components/schemas/TokenAmount"
        orderType:
          description: "The type is either a buy or sell order"
          $ref: "#/components/schemas/OrderType"
        partiallyFillable:
          description: Is this a fill-or-kill order or a partially fillable order?
          type: boolean
        signature:
          description: 65 bytes encoded as hex without `0x` prefix. v + r + s from the spec.
          example: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    OrderMetaData:
      description: |
        Extra order data that is returned to users when querying orders 
        but not provided by users when creating orders.
      type: object
      properties:
        creationTime:
          description: Creation time of the order. Encoded as ISO 8601 UTC.
          type: string
          example: "2020-12-03T18:35:18.814523Z"
        owner:
          $ref: "#/components/schemas/Address"
        UID:
          $ref: "#/components/schemas/UID"
    Order:
      allOf:
        - $ref: "#/components/schemas/OrderCreation"
        - $ref: "#/components/schemas/OrderMetaData"
    UID:
     description: |
      Unique identifier for the order: 56 bytes encoded as hex without 0x. 
      Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address
      and bytes 52..56 valid to,
     type: string
    OrderPostError:
      type: object
      properties:
        errorType:
          type: string
          enum: [ MissingOrderData, InvalidSignature, DuplicateOrder, InsufficientFunds]
        description:
          type: string
